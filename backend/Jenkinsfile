pipeline {
  agent any

  environment {
    // JAVA_HOME needs to point to your JDK installation path on the Jenkins agent
    // Choose one based on your actual setup
    // JAVA_HOME = '/usr/lib/jvm/java-21-openjdk-amd64'
    JAVA_HOME = '/opt/jdk/openjdk-21'

    // Jenkins Credential IDs
    GCR_CREDS       = 'gcr-credentials' // Jenkins Secret Text credential for Docker registry login (JSON key)
    GCP_SA_KEY      = 'gcp-sa-key'      // Jenkins File credential for GCP Service Account key

    // Google Cloud Artifact Registry / Project Details
    AR_PROJECT      = "manhattan-muse"
    AR_REGION       = "europe-west2"
    AR_REPO_NAME    = "manhattan-muse-backend" // **FIXED: Removed leading space**
    PROJECT_ID      = "${AR_PROJECT}" // Alias for consistency
    CLUSTER_NAME    = "cluster-1"
    LOCATION        = "us-west2-a" // GKE cluster location

    // SonarQube Token (store as Secret Text credential in Jenkins for production)
    // For demonstration, it's here, but in production, use: SONAR_TOKEN = credentials('your-sonar-token-id')
    SONAR_TOKEN     = "sqp_80d93d075a2048295eff632f1842ffa4c9e19155"

    // Application Environment Variables (for deployment)
    SPRING_DATASOURCE_URL = "jdbc:postgresql://aws-0-eu-west-1.pooler.supabase.com:5432/postgres"
    SPRING_DATASOURCE_USERNAME = "postgres.yfigmcasvrvubowgxauv"
    SPRING_DATASOURCE_PASSWORD = "Leinster1492!!"
    SPRING_DATASOURCE_DRIVER_CLASS_NAME = "org.postgresql.Driver"
    OPENWEATHER_API_KEY = "0c11eb81e09f3b3fa2b68762ce31a632"

    // Image Tagging for Docker
    IMAGE_TAG       = "${BRANCH_NAME}-${BUILD_ID}" // Example: main-123 or feature/xyz-456
    GCP_ACCOUNTNAME = "your-service-account@${AR_PROJECT}.iam.gserviceaccount.com"
  }

  triggers {
    // Polls SCM every 5 minutes (H/5)
    pollSCM('H/5 * * * *')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Unit Test') {
      steps {
        withMaven(maven: 'M3', jdk: 'JDK_21') {
          dir('backend') {
            sh '''
              # Unset sensitive environment variables to ensure tests run in an isolated environment
              unset SPRING_DATASOURCE_URL
              unset SPRING_DATASOURCE_USERNAME
              unset SPRING_DATASOURCE_PASSWORD
              unset SPRING_DATASOURCE_DRIVER_CLASS_NAME
              unset OPENWEATHER_API_KEY
              mvn clean test -Dspring.profiles.active=test -e
            '''
          }
        }
      }
    }

    stage('Prepare for SonarQube') {
      steps {
        withMaven(maven: 'M3', jdk: 'JDK_21') {
          script {
            dir('backend') {
              // Perform a clean verify to compile code and generate necessary analysis artifacts
              sh 'mvn clean verify -DskipTests'
            }
          }
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withMaven(maven: 'M3', jdk: 'JDK_21') {
          script {
            dir('backend') {
              withSonarQubeEnv('SonarQube') { // 'SonarQube' should match the name configured in Jenkins Global Tool Configuration
                sh 'echo "DEBUG: SonarQube analysis branch name will be: ${BRANCH_NAME}"' // Keep for now
                sh '''
                  mvn sonar:sonar \\
                    -Dsonar.login=${SONAR_TOKEN} \\
                    -Dsonar.projectKey=manhattan-muse \\
                    -Dsonar.projectName="manhattan-muse" \\
                    -Dsonar.branch.name=${BRANCH_NAME} // **FIXED: Correct parameter separation**
                '''
              }
            }
          }
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        script {
          // Uses the 'docker' pipeline step for Docker operations with Jenkins credentials
          docker.withRegistry("https://${AR_REGION}-docker.pkg.dev/${AR_PROJECT}/${AR_REPO_NAME}", "${GCR_CREDS}") {
            sh 'chmod +x backend/gcp-docker.sh'
            sh """
              export AR_PROJECT="${AR_PROJECT}"
              export AR_REGION="${AR_REGION}"
              export AR_REPO_NAME="${AR_REPO_NAME}"
              export IMAGE_TAG="${IMAGE_TAG}"
              backend/gcp-docker.sh
            """
          }
        }
      }
    }

    stage('Deploy to GKE') {
      steps {
        // Uses GCP Service Account Key for authentication with gcloud/kubectl
        withCredentials([file(credentialsId: "${GCP_SA_KEY}", variable: 'KEYFILE_PATH')]) {
          sh 'chmod +x backend/kube-deploy.sh'
          sh """
            export PROJECT_ID="${PROJECT_ID}"
            export CLUSTER_NAME="${CLUSTER_NAME}"
            export LOCATION="${LOCATION}"
            export GCP_ACCOUNTNAME="${GCP_ACCOUNTNAME}"
            // Ensure IMAGE_URL correctly points to the specific tagged image
            export IMAGE_URL="${AR_REGION}-docker.pkg.dev/${AR_PROJECT}/${AR_REPO_NAME}/backend:${IMAGE_TAG}" // **RECOMMENDED: Changed back to IMAGE_TAG**
            backend/kube-deploy.sh "${KEYFILE_PATH}"
          """
        }
      }
    }

    stage('Quality Gate') {
      steps {
        // Pauses pipeline execution until SonarQube Quality Gate status is received
        // Aborts the pipeline if the Quality Gate is not 'Passed'
        waitForQualityGate abortPipeline: true
      }
    }
  }

  post {
    success {
      echo "✅ Backend deployed: ${IMAGE_TAG}"
    }
    failure {
      echo "❌ Backend pipeline failed"
    }
  }
}
