pipeline {
  agent any

  environment {
    // SONAR_TOKEN   = credentials('sonar-token-id')
    GCR_CREDS     = 'gcr-credentials'
    GCP_SA_KEY    = 'gcp-sa-key'

    AR_PROJECT    = "abstract-tract-383807"
    AR_REGION     = "europe-west2"
    AR_REPO_NAME  = "backend-images"
    PROJECT_ID    = "${AR_PROJECT}"
    CLUSTER_NAME  = "cluster-1"
    LOCATION      = "us-west2-a"
    SONAR_TOKEN   = "sqp_8762f9c95e9335c04b4656b71ad9ea40b60fdca7"
    SPRING_DATASOURCE_URL = "jdbc:postgresql://aws-0-eu-west-1.pooler.supabase.com:5432/postgres"
    SPRING_DATASOURCE_USERNAME = "postgres.yfigmcasvrvubowgxauv"
    SPRING_DATASOURCE_PASSWORD = "Leinster1492!!" // <-- DANGER: Hardcoded password! Move to Jenkins Credentials later!
    SPRING_DATASOURCE_DRIVER_CLASS_NAME = "org.postgresql.Driver" // Note: underscore for environment variable

    // --- OpenWeather API Key ---
    OPENWEATHER_API_KEY = "0c11eb81e09f3b3fa2b68762ce31a632" // Consider moving this to credentials too

    IMAGE_TAG     = "${BRANCH_NAME}-${BUILD_ID}"

    GCP_ACCOUNTNAME = "your-service-account@${AR_PROJECT}.iam.gserviceaccount.com"
  }

  triggers {
    pollSCM('H/5 * * * *')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
  }

    // stage('Build & Test') {
    //         steps {
    //             // ADD THIS withMaven BLOCK HERE
    //             withMaven(maven: 'M3') { // 'M3' should match the name configured in Jenkins > Manage Jenkins > Tools
    //                 script {
    //                     dir('backend') {
    //                         sh "mvn clean verify"
    //                     }
    //                 }
    //             }
    //         }
    //     }

    // stage('Build & Test') {
    //   steps {
    //     withMaven(maven: 'M3') {
    //       sh 'mvn clean package -DskipTests=false'
    //     }
    //   }
    // }
    stage('Unit Test') {
      steps {
        // Run tests from the 'backend' subdirectory
        dir('backend') {
          sh 'mvn test'
        }
      }
    


    stage('Prepare for SonarQube') {
            steps {
                withMaven(maven: 'M3', jdk: 'JDK_24') { // <-- This should be set to 'JDK_24'
                    script {
                        dir('backend') {
                            sh "mvn clean verify"
                        }
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withMaven(maven: 'M3', jdk: 'JDK_24') { // <-- And this one
                    script {
                        dir('backend') {
                            withSonarQubeEnv('SonarQube') {
                                sh 'mvn sonar:sonar -Dsonar.login=${SONAR_TOKEN} -Dsonar.projectKey=backend-quality -Dsonar.projectName="backend-quality"'
                            }
                        }
                    }
                }
            }
        }

    stage('Docker Build & Push') {
      steps {
        script {
          docker.withRegistry("https://${AR_REGION}-docker.pkg.dev/${AR_PROJECT}/${AR_REPO_NAME}", "${GCR_CREDS}") {
            sh 'chmod +x backend/gcp-docker.sh'
            // Separate the variable exports into one sh block
            sh """
              export AR_PROJECT="${AR_PROJECT}"
              export AR_REGION="${AR_REGION}"
              export AR_REPO_NAME="${AR_REPO_NAME}"
              export IMAGE_TAG="${IMAGE_TAG}"
            """
            // Execute the script in a separate sh block
            sh 'backend/gcp-docker.sh'
          }
        }
      }
    }

    stage('Deploy to GKE') {
      steps {
        withCredentials([file(credentialsId: "${GCP_SA_KEY}", variable: 'KEYFILE_PATH')]) {
          sh 'chmod +x backend/kube-deploy.sh'
          
          // CRITICAL CHANGE: Combine all exports and the script execution into ONE sh block
          sh """
            # Export all necessary variables for kube-deploy.sh
            export PROJECT_ID="${PROJECT_ID}"
            export CLUSTER_NAME="${CLUSTER_NAME}"
            export LOCATION="${LOCATION}"
            export GCP_ACCOUNTNAME="${GCP_ACCOUNTNAME}"
            export IMAGE_URL="${AR_REGION}-docker.pkg.dev/${AR_PROJECT}/${AR_REPO_NAME}/backend:latest"

            # Debugging for KEYFILE_PATH (can be removed once everything works)
            echo "DEBUG: GCP_KEYFILE_PATH is: \${KEYFILE_PATH}"
            test -f "\${KEYFILE_PATH}" && echo "DEBUG: Key file exists and is a regular file." || echo "DEBUG: Key file does NOT exist or is not a regular file."
            test -r "\${KEYFILE_PATH}" && echo "DEBUG: Key file is readable." || echo "DEBUG: Key file is NOT readable."

            # Execute the deployment script, passing KEYFILE_PATH as an argument
            backend/kube-deploy.sh "\${KEYFILE_PATH}"
          """
        }
      }
    }

    // stage('Build & Test') {
    //   steps {
    //     withMaven(maven: 'M3') {
    //       sh 'mvn clean package -DskipTests=false'
    //     }
    //   }
    // }

    // stage('SonarQube Analysis') {
    //   steps {
    //     withMaven(maven: 'M3') {
    //       withSonarQubeEnv('SonarQube') {
    //         sh 'mvn clean verify sonar:sonar -Dsonar.login=${SONAR_TOKEN}'
    //       }
    //     }
    //   }
    // }

    stage('Quality Gate') {
      steps {
        waitForQualityGate abortPipeline: true
      }
    }
  }

  post {
    success { echo "✅ Backend deployed: ${IMAGE_TAG}" }
    failure { echo "❌ Backend pipeline failed" }
  }
}
